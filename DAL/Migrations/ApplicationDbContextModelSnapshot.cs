// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventStartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("CorporationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CorporationName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CorporationParcitipationsCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentMethodTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SocialsecurityNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantTypeId");

                    b.HasIndex("PaymentMethodTypeId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Domain.ParticipantType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParticipantTypes");
                });

            modelBuilder.Entity("Domain.PaymentMethodType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethodTypes");
                });

            modelBuilder.Entity("Domain.Participant", b =>
                {
                    b.HasOne("Domain.Event", null)
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId");

                    b.HasOne("Domain.ParticipantType", "ParticipantType")
                        .WithMany()
                        .HasForeignKey("ParticipantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany()
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParticipantType");

                    b.Navigation("PaymentMethodType");
                });

            modelBuilder.Entity("Domain.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
